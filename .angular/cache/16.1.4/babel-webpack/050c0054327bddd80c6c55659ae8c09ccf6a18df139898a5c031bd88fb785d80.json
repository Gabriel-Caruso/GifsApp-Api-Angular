{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//const GIPHY_API_KEY = 'EE3h2WcPP0wTZWqaevFaeQzJ0BtNCb70';\nexport let GifsService = /*#__PURE__*/(() => {\n  class GifsService {\n    constructor(http) {\n      this.http = http;\n      this.gifList = [];\n      this._tagsHistory = [];\n      this.serviceUrl = 'https://api.giphy.com/v1/gifs';\n      this.apiKey = 'EE3h2WcPP0wTZWqaevFaeQzJ0BtNCb70';\n      //Aquí llamamos la carga del Local Storage. Se carga al ser inyectado este service.\n      this.loadLocalStorage();\n      if (this._tagsHistory.length === 0) {\n        return;\n      }\n      this.searchTag(this._tagsHistory[0]);\n    }\n    get tagsHistory() {\n      return [...this._tagsHistory];\n    }\n    searchTag(tag) {\n      if (tag.length === 0) return;\n      this.organizeHistory(tag);\n      const params = new HttpParams().set('api_key', this.apiKey).set('limit', 10).set('q', tag);\n      this.http.get(`${this.serviceUrl}/search`, {\n        params\n      }).subscribe(resp => {\n        this.gifList = resp.data;\n      });\n    }\n    organizeHistory(tag) {\n      tag = tag.toLowerCase();\n      if (this.tagsHistory.includes(tag)) {\n        this._tagsHistory = this._tagsHistory.filter(oldTag => oldTag !== tag);\n      }\n      this._tagsHistory.unshift(tag);\n      this._tagsHistory = this.tagsHistory.splice(0, 10);\n      this.saveLocalStorage();\n    }\n    saveLocalStorage() {\n      localStorage.setItem('history', JSON.stringify(this._tagsHistory));\n    }\n    loadLocalStorage() {\n      if (!localStorage.getItem('history')) {\n        return;\n      }\n      //Le pasamos el operador non null (la exclamación) para que TS no indique que esto puede ser nulo\n      //Ya nos aseguramos en el condicional anterior que NO va a pasar nunca un nulo. Hay que decírselo\n      this._tagsHistory = JSON.parse(localStorage.getItem('history'));\n    }\n  }\n  GifsService.ɵfac = function GifsService_Factory(t) {\n    return new (t || GifsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  GifsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GifsService,\n    factory: GifsService.ɵfac,\n    providedIn: 'root'\n  });\n  return GifsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}